{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Shellux",
  "scopeName": "source.shellux",
  "patterns": [
    { "include": "#shebang" },
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#keywords" },
    { "include": "#constants" },
    { "include": "#functions" },
    { "include": "#types" },
    { "include": "#operators" },
    { "include": "#numbers" },
    { "include": "#variables" },
    { "include": "#command-substitution" },
    { "include": "#punctuation" }
  ],
  "repository": {
    "shebang": {
      "patterns": [
        {
          "name": "comment.line.shebang.shellux",
          "match": "^#!.*$"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.block.shellux",
          "begin": "/\\*",
          "end": "\\*/",
          "patterns": [
            {
              "name": "comment.block.shellux",
              "match": "."
            }
          ]
        },
        {
          "name": "comment.line.number-sign.shellux",
          "match": "#.*$"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.triple.shellux",
          "begin": "\"\"\"",
          "end": "\"\"\"",
          "patterns": [
            { "include": "#string-interpolation" },
            { "include": "#escape-characters" }
          ]
        },
        {
          "name": "string.quoted.double.shellux",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            { "include": "#string-interpolation" },
            { "include": "#escape-characters" }
          ]
        },
        {
          "name": "string.quoted.single.shellux",
          "begin": "'",
          "end": "'",
          "patterns": [
            { "include": "#escape-characters" }
          ]
        }
      ]
    },
    "string-interpolation": {
      "patterns": [
        {
          "name": "meta.embedded.line.shellux",
          "begin": "\\$\\{",
          "end": "\\}",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.template-expression.begin.shellux" }
          },
          "endCaptures": {
            "0": { "name": "punctuation.definition.template-expression.end.shellux" }
          },
          "patterns": [
            { "include": "$self" }
          ]
        }
      ]
    },
    "escape-characters": {
      "patterns": [
        {
          "name": "constant.character.escape.shellux",
          "match": "\\\\(n|r|t|\\\\|'|\"|\\$)"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.shellux",
          "match": "\\b(if|else|for|while|in|match|try|catch|return|break|continue)\\b"
        },
        {
          "name": "keyword.declaration.shellux",
          "match": "\\b(fn|let|const)\\b"
        },
        {
          "name": "keyword.operator.word.shellux",
          "match": "\\b(is|and|or|not)\\b"
        },
        {
          "name": "keyword.other.shellux",
          "match": "\\b(as|range|walk_dir|spawn|kill|wait)\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.boolean.shellux",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "constant.language.null.shellux",
          "match": "\\b(nil|null)\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.shellux",
          "begin": "\\b(fn)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "end": "(?=\\{)",
          "beginCaptures": {
            "1": { "name": "keyword.declaration.function.shellux" },
            "2": { "name": "entity.name.function.shellux" }
          },
          "patterns": [
            { "include": "#function-parameters" },
            { "include": "#return-type" }
          ]
        },
        {
          "name": "meta.function-call.shellux",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()",
          "captures": {
            "1": { "name": "entity.name.function.shellux" }
          }
        },
        {
          "name": "support.function.builtin.shellux",
          "match": "\\b(print|println|show|input|exit|env|set_env|len|contains|starts_with|ends_with|split|join|read_file|write_file|exists|is_file|is_dir|mkdir|rm|mv|cp|parse_json|default_config|join_path|duration|filter|map|sort|trim|lower|upper)\\b"
        }
      ]
    },
    "function-parameters": {
      "patterns": [
        {
          "name": "meta.parameters.shellux",
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
            { "include": "#types" },
            { "include": "#variables" },
            { "include": "#punctuation" }
          ]
        }
      ]
    },
    "return-type": {
      "patterns": [
        {
          "name": "meta.return-type.shellux",
          "match": "->\\s*([a-zA-Z_][a-zA-Z0-9_]*|\\([^)]+\\)|\\[[^]]+\\])",
          "captures": {
            "1": { "name": "entity.name.type.shellux" }
          }
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "entity.name.type.primitive.shellux",
          "match": "\\b(int|float|string|bool|any|error)\\b"
        },
        {
          "name": "entity.name.type.collection.shellux",
          "match": "\\b(map|array)\\b"
        },
        {
          "name": "storage.type.shellux",
          "match": ":\\s*([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": { "name": "entity.name.type.shellux" }
          }
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.shellux",
          "match": "(:=|=|\\+=|-=|\\*=|/=)"
        },
        {
          "name": "keyword.operator.comparison.shellux",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.logical.shellux",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.arithmetic.shellux",
          "match": "(\\+|-|\\*\\*|\\*|/|%)"
        },
        {
          "name": "keyword.operator.bitwise.shellux",
          "match": "(&|\\||\\^|~|<<|>>)"
        },
        {
          "name": "keyword.operator.pipeline.shellux",
          "match": "(\\|>)"
        },
        {
          "name": "keyword.operator.arrow.shellux",
          "match": "(->|=>)"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.shellux",
          "match": "\\b\\d+\\.\\d+([eE][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.integer.shellux",
          "match": "\\b\\d+\\b"
        },
        {
          "name": "constant.numeric.hex.shellux",
          "match": "\\b0[xX][0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.octal.shellux",
          "match": "\\b0[oO][0-7]+\\b"
        },
        {
          "name": "constant.numeric.binary.shellux",
          "match": "\\b0[bB][01]+\\b"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.constant.shellux",
          "match": "\\b[A-Z][A-Z0-9_]*\\b"
        },
        {
          "name": "variable.other.shellux",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "command-substitution": {
      "patterns": [
        {
          "name": "meta.embedded.command.shellux",
          "begin": "\\$\\(",
          "end": "\\)",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.command.begin.shellux" }
          },
          "endCaptures": {
            "0": { "name": "punctuation.definition.command.end.shellux" }
          },
          "patterns": [
            {
              "name": "string.unquoted.command.shellux",
              "match": "."
            }
          ]
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.separator.comma.shellux",
          "match": ","
        },
        {
          "name": "punctuation.terminator.statement.shellux",
          "match": ";"
        },
        {
          "name": "punctuation.accessor.shellux",
          "match": "\\."
        },
        {
          "name": "punctuation.section.braces.begin.shellux",
          "match": "\\{"
        },
        {
          "name": "punctuation.section.braces.end.shellux",
          "match": "\\}"
        },
        {
          "name": "punctuation.section.brackets.begin.shellux",
          "match": "\\["
        },
        {
          "name": "punctuation.section.brackets.end.shellux",
          "match": "\\]"
        },
        {
          "name": "punctuation.section.parens.begin.shellux",
          "match": "\\("
        },
        {
          "name": "punctuation.section.parens.end.shellux",
          "match": "\\)"
        }
      ]
    }
  }
}
